dnl Process this file with autoconf to produce a configure script.
AC_INIT(wmfapi.c)
dnl AC_CONFIG_HEADER(config.h)

dnl Checks for programs.
dnl AC_PROG_CC
dnl AC_PROG_CC shoves in -g by default, i *really* hate this so here goes...
dnl ill shove in the autoconf def of AC_PROG_CC verbatim and remove the -g 
dnl stuff
dnl autoconf stuff begins here

AC_DEFUN(AC_PROG_CC_NO_G,
[AC_BEFORE([$0], [AC_PROG_CPP])dnl
AC_CHECK_PROG(CC, gcc, gcc)
if test -z "$CC"; then
  AC_CHECK_PROG(CC, cc, cc, , , /usr/ucb/cc)
  test -z "$CC" && AC_MSG_ERROR([no acceptable cc found in \$PATH])
fi

AC_PROG_CC_WORKS
AC_PROG_CC_GNU

if test $ac_cv_prog_gcc = yes; then
  GCC=yes
dnl Check whether -g works, even if CFLAGS is set, in case the package
dnl plays around with CFLAGS (such as to build both debugging and
dnl normal versions of a library), tasteless as that idea is.
  ac_test_CFLAGS="${CFLAGS+set}"
  ac_save_CFLAGS="$CFLAGS"
  CFLAGS=
dnl   C Begin
dnl AC_PROG_CC_G
dnl   C End
  if test "$ac_test_CFLAGS" = set; then
    CFLAGS="$ac_save_CFLAGS"
dnl   C Begin
dnl  elif test $ac_cv_prog_cc_g = yes; then
dnl    CFLAGS="-g -O2"
dnl   C End
  else
    CFLAGS="-O2"
  fi
else
  GCC=
  test "${CFLAGS+set}" = set 
dnl   C Begin
dnl || CFLAGS="-g"
dnl   C End
fi
])



dnl autoconf stuff ends here

AC_PROG_CC_NO_G
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_RANLIB

dnl test for X, and Xpm and ttf to get the flags needed to
dnl compile something to use libwmf

if test [ "$no_x" = yes ]; then
    X11=""
else
    X11="-lX11"
fi


dnl system ttf support
dnl ========================================================

dnl A sensible default:
TTF_DIR="/usr"

_cppflags=${CPPFLAGS}
_ldflags=${LDFLAGS}

AC_ARG_WITH(ttf,
[  --with-ttf[=DIR]	  find the ttf library in DIR],[
  if test "$withval" != "no"; then
    TTF_DIR=$withval
    CPPFLAGS="${CPPFLAGS} -I$withval/include"
    LDFLAGS="${LDFLAGS} -L$withval/lib"
  fi
])

AC_CHECK_HEADERS(freetype.h freetype/freetype.h,[
    AC_CHECK_LIB(ttf, TT_Init_FreeType,
	AC_DEFINE(HAVE_TTF)
	AC_CHECK_HEADER(freetype.h,[
	    TTF_CFLAGS="-I${TTF_DIR}/include"],
	    AC_CHECK_HEADER(freetype/freetype.h,[
		TTF_CFLAGS="-I${TTF_DIR}/include/freetype"]))
	TTF_LIBS="-L${TTF_DIR}/lib -lttf",
	AC_CHECK_LIB(ttf, TT_Done_FreeType,[
	    AC_DEFINE(HAVE_TTF)
	    AC_CHECK_HEADER(freetype.h,[
		TTF_CFLAGS="-I${TTF_DIR}/include"],
		AC_CHECK_HEADER(freetype/freetype.h,[
		    TTF_CFLAGS="-I${TTF_DIR}/include/freetype"]))
	    TTF_LIBS="-L${TTF_DIR}/lib -lttf"],
	    AC_MSG_WARN([TrueType library not installed. Please visit
http://www.freetype.org and try again. The GD binding will not be
able to handle wmf text and wmftogif will not have text support as a
result (see README).]), -lnsl))
    break],
    if test "x$ac_cv_header_freetype_h" = xno -a \
    "x$ac_cv_header_freetype_freetype_h" = xno; then
	AC_MSG_WARN([TrueType library not installed. Please visit
http://www.freetype.org and try again. The GD binding will not be
able to handle wmf text and wmftogif will not have text support as a
result (see README).])
    fi)

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

dnl ========================================================
dnl end of Freetype

AC_PATH_X
### Check for the pt library (for SCO, needed for X)
AC_CHECK_LIB(pt,ptsname,[X_EXTRA_LIBS="$X_EXTRA_LIBS -lpt"])

AC_PATH_XTRA
AC_HEADER_STDC

AC_CHECK_HEADERS(unistd.h)
CFLAGS="$CFLAGS $X_CFLAGS"
CPPFLAGS="$CPPFLAGS $X_CFLAGS"

LIBS="$X_LIBS $LIBS -lX11 $X_EXTRA_LIBS"

dnl system xpm support, done after X, as its usually in the same place
dnl ========================================================

_cppflags=${CPPFLAGS}
_ldflags=${LDFLAGS}

AC_ARG_WITH(xpm,
[  --with-xpm[=DIR]	  use xpm library in DIR],[
  if test "$withval" != "no"; then
    XPM_DIR=$withval
    CPPFLAGS="${CPPFLAGS} -I$withval/include"
    LDFLAGS="${LDFLAGS} -L$withval/lib"
  fi
])

AC_CHECK_HEADER(X11/xpm.h,
    AC_CHECK_LIB(Xpm, XpmReadFileToXpmImage,
	AC_DEFINE(HAVE_XPM)
	if test "x${XPM_DIR}" != "x"; then
	    XPM_CFLAGS="-I${XPM_DIR}/include"
	    XPM_LIBS="-L${XPM_DIR}/lib -lXpm"
	else
	    XPM_LIBS="-lXpm"
	fi
	XPMINCLUDE="<X11/xpm.h>"
	AC_DEFINE(USE_X),
	AC_MSG_ERROR(Xpm not installed. Please visit
  http://www.inria.fr/koala/lehors/xpm.html and try again)),
    AC_CHECK_HEADER(xpm.h,
	AC_CHECK_LIB(Xpm, XpmReadFileToXpmImage,
	    AC_DEFINE(HAVE_XPM)
	    if test "x${XPM_DIR}" != "x"; then
		XPM_CFLAGS="-I${XPM_DIR}/include"
		XPM_LIBS="-L${XPM_DIR}/lib -lXpm"
	    else
		XPM_LIBS="-lXpm"
	    fi
	    XPMINCLUDE="<xpm.h>"
	    AC_DEFINE(USE_X),
	    AC_MSG_ERROR(Xpm not installed. Please visit
  http://www.inria.fr/koala/lehors/xpm.html and try again)),
	AC_MSG_ERROR(Xpm not installed. Please visit
  http://www.inria.fr/koala/lehors/xpm.html and try again)))

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

dnl ========================================================
dnl end of Xpm

dnl Digital UNIX defines nint in libm
AC_CHECK_LIB(m, nint, AC_DEFINE(HAVE_NINT))

dnl system ZLIB support, originally nicked from mozilla source
dnl ========================================================

_cppflags=${CPPFLAGS}
_ldflags=${LDFLAGS}

AC_ARG_WITH(zlib,
[  --with-zlib[=DIR]       use libz in DIR],[
  if test "$withval" != "no"; then
    ZLIB_DIR=$withval
    CPPFLAGS="${CPPFLAGS} -I$withval/include"
    LDFLAGS="${LDFLAGS} -L$withval/lib"
  fi
])

AC_CHECK_HEADER(zlib.h,
    AC_CHECK_LIB(z, gzread,[
	if test "x${ZLIB_DIR}" != "x"; then
	    ZLIB_CFLAGS="-I${ZLIB_DIR}/include"
	    ZLIB_LIBS="-L${ZLIB_DIR}/lib -lz"
	else
	    ZLIB_LIBS="-lz"
	fi],
	AC_CHECK_LIB(gz, gzread,[
	    if test "x${ZLIB_DIR}" != "x"; then
		ZLIB_CFLAGS="-I${ZLIB_DIR}/include"
		ZLIB_LIBS="-L${ZLIB_DIR}/lib -lz"
	    else
		ZLIB_LIBS="-lz"
	    fi])))

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

dnl ========================================================
dnl end of zlib


dnl begin png search
dnl =========================
#
# Check for PNG
#
_cppflags=${CPPFLAGS}
_ldflags=${LDFLAGS}

AC_ARG_WITH(png,
[  --with-png[=DIR]	  use png library in DIR],[
  if test "$withval" != "no"; then
    PNG_DIR=$withval
    CPPFLAGS="${CPPFLAGS} -I$withval/include"
    if test "x$ZLIB_CFLAGS" != "x"; then
	CPPFLAGS="${CPPFLAGS} ${ZLIB_CFLAGS}"
    fi
    LDFLAGS="${LDFLAGS} -L$withval/lib"
  fi
])

AC_CHECK_HEADER(png.h,
    AC_CHECK_HEADER(pngconf.h,
	AC_CHECK_LIB(png, png_info_init,
	    AC_DEFINE(HasPNG)
	    if test "x${PNG_DIR}" != "x"; then
		PNG_CFLAGS="-I${PNG_DIR}/include"
		PNG_LIBS="-L${PNG_DIR}/lib -lpng"
	    else
		PNG_LIBS="-lpng"
	    fi,
	    AC_CHECK_LIB(png, png_info_destroy,
		AC_DEFINE(HasPNG)
		if test "x${PNG_DIR}" != "x"; then
		    PNG_CFLAGS="-I${PNG_DIR}/include"
		    PNG_LIBS="-L${PNG_DIR}/lib -lpng"
		else
		    PNG_LIBS="-lpng"
		fi, , ${ZLIB_LIBS} -lm))))

CPPFLAGS=${_cppflags}
LDFLAGS=${_ldflags}

dnl end png search
dnl =========================

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl check for getopt
dnl AC_CHECK_FUNC(getopt_long, , [LIBOBJS="$LIBOBJS getopt1.o getopt.o"])
dnl AC_CHECK_FUNC(strerror, , [LIBOBJS="$LIBOBJS strerror.o"])
dnl AC_SUBST(LIBOBJS)

AC_SUBST(X11)
AC_SUBST(X_LIBS)
AC_SUBST(X_EXTRA_LIBS)

AC_SUBST(PNG_CFLAGS)
AC_SUBST(PNG_LIBS)

AC_SUBST(ZLIB_CFLAGS)
AC_SUBST(ZLIB_LIBS)

AC_SUBST(TTF_CFLAGS)
AC_SUBST(TTF_LIBS)

AC_SUBST(XPM_LIBS)
AC_SUBST(XPM_CFLAGS)
AC_SUBST(XPMINCLUDE)

AC_OUTPUT(Makefile libdib/Makefile xgd-1.7.3/Makefile libxfig/Makefile)

